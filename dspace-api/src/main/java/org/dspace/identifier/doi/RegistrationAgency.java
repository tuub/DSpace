/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */
package org.dspace.identifier.doi;

import java.util.Map;
import org.dspace.identifier.IdentifierException;
import org.dspace.services.ConfigurationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;

/**
 *
 * @author Pascal-Nicolas Becker (p dot becker at tu hyphen berlin dot de)
 */
public abstract class RegistrationAgency {
    protected ConfigurationService configurationService;
    
    @Autowired
    @Required
    public void setConfigurationService(ConfigurationService configurationService) {
        this.configurationService = configurationService;
    }
    
    /**
     * RegistrationAgencies needs to support default constructor.
     */
    public RegistrationAgency() {}

    /**
     * Create the identifier defined as parameter for the item described by the
     * metadata. Creating means to register it at the registration agency.
     * 
     * @param identifier The DOI that should be registered,
     * f.e. <code>doi:10.123/456</code>.
     * @param metadata Metadata describing the object the identifier belongs to.
     * @return Boolean weather the registration was successful. If it was
     *         impossible to create the identifier, details should be logged.
     * @throws IdentifierException
     */
    public abstract boolean create(String identifier, Map<String,String> metadata) throws IdentifierException;
    
    /**
     * This method reserves an identifier at the registration agency for later
     * creation. For some registration agencies the metadata of the item the
     * identifiers belongs to are necessary for reservation of an identifier.
     * 
     * @param identifier The DOI that should be registered,
     * f.e. <code>doi:10.123/456</code>.
     * @param metadata Metadata describing the object the identifier belongs to.
     * @return Boolean weather the identifier could be reserved. If the
     *         identifier could not be reserved, details should be logged.
     * @throws IdentifierException 
     */
    public abstract boolean reserve(String identifier, Map<String,String> metadata) throws IdentifierException;
    
    /**
     * Creates an identifier that will be generated by the registration agency.
     * This method does the some as <link>#create(String,
     * Map<String,String></link> but instead of creating a specified DOI the
     * registration agency will generate a unique suffix and will register the
     * DOI consisting of the configured DOI namespace (also called prefix)
     * and the generated suffix.
     * 
     * @param metadata Metadata of the object an identifier should be minted for.
     * @return The generated and reserved DOI, f.e. <code>doi:10.123/456</code>.
     * @throws IdentifierException If minting false or in case of any other error.
     */
    public abstract String mint(Map<String,String> metadata) throws IdentifierException;
    
    /**
     * Destroy a reserved DOI, fails if DOI was ever public.
     * @param identifier The DOI that should be deleted
     * @return Boolean weather deletion was successful.
     * @throws IdentifierException 
     */
    public abstract boolean delete(String identifier) throws IdentifierException;
    
}
